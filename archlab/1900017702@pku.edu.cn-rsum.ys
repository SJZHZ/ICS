# 1900017702  ZhuYue
# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 


# Sample linked list
.align 8
ele1:
	.quad 0x00a
	.quad ele2
ele2:
	.quad 0x0b0
	.quad ele3
ele3:
	.quad 0xc00
	.quad 0


main:	irmovq ele1,%rdi	# ls(address) in rdi
	call rsum_list		# rsum_list(ele1)
	ret

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
	andq %rdi,%rdi
	je edge			# rdi = 0
	mrmovq (%rdi),%rsi	# rsi = ls -> val
	mrmovq 8(%rdi),%rdi	# ls = ls -> next
	pushq %rsi		# caller save
	call rsum_list		# rsum_list(ls), get result in rax
	popq %rsi
	addq %rsi,%rax		# rax = rax + rsi
	ret                  # Return
edge:
	xorq %rax,%rax
	ret

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
